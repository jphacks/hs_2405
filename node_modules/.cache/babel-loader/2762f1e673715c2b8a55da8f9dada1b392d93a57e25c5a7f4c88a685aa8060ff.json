{"ast":null,"code":"var _jsxFileName = \"/Users/shuga/hs_2405/src/MatchedUsers.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { db } from './firebase';\nimport { collection, query, where, getDocs, addDoc } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MatchedUsers({\n  userId\n}) {\n  _s();\n  const [matches, setMatches] = useState([]);\n  useEffect(() => {\n    const fetchAndCheckMutualLikes = async () => {\n      try {\n        // `userId`が「いいね」したすべてのユーザーを取得\n        const likeFromUserQuery = query(collection(db, 'Likes'), where('fromUserId', '==', userId), where('evaluation', '==', 'like'));\n        const likeFromUserSnapshot = await getDocs(likeFromUserQuery);\n        const likedUserIds = likeFromUserSnapshot.docs.map(doc => doc.data().toUserId);\n\n        // 既存のマッチを取得\n        const existingMatchesQuery = query(collection(db, 'UserMatches'), where('userId', '==', userId));\n        const existingMatchesSnapshot = await getDocs(existingMatchesQuery);\n        const existingMatchedUserIds = existingMatchesSnapshot.docs.map(doc => doc.data().matchedUserId);\n\n        // 新しいマッチを確認して保存\n        const newMatches = [];\n        for (const likedUserId of likedUserIds) {\n          if (existingMatchedUserIds.includes(likedUserId)) {\n            console.log(`既にマッチが存在しています: ${userId} と ${likedUserId}`);\n            continue;\n          }\n\n          // 相手も`userId`を「いいね」しているか確認\n          const mutualLikeQuery = query(collection(db, 'Likes'), where('fromUserId', '==', likedUserId), where('toUserId', '==', userId), where('evaluation', '==', 'like'));\n          const mutualLikeSnapshot = await getDocs(mutualLikeQuery);\n          if (!mutualLikeSnapshot.empty) {\n            // 新しいマッチを保存\n            await addDoc(collection(db, 'UserMatches'), {\n              userId: userId,\n              matchedUserId: likedUserId,\n              timestamp: new Date()\n            });\n            newMatches.push({\n              userId,\n              matchedUserId: likedUserId\n            });\n            console.log(`新しいマッチが保存されました: ${userId} と ${likedUserId}`);\n          }\n        }\n\n        // すべてのマッチ情報をstateにセット\n        setMatches([...existingMatchesSnapshot.docs.map(doc => doc.data()), ...newMatches]);\n      } catch (error) {\n        console.error('マッチングとデータ取得エラー:', error);\n      }\n    };\n    fetchAndCheckMutualLikes();\n  }, [userId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u30DE\\u30C3\\u30C1\\u3057\\u305F\\u30E6\\u30FC\\u30B6\\u30FC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: matches.map((match, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u30DE\\u30C3\\u30C1\\u30E6\\u30FC\\u30B6\\u30FCID: \", match.matchedUserId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(MatchedUsers, \"YhlcfFikU4Xnm4DkUW695+Zqf6o=\");\n_c = MatchedUsers;\nexport default MatchedUsers;\nvar _c;\n$RefreshReg$(_c, \"MatchedUsers\");","map":{"version":3,"names":["React","useEffect","useState","db","collection","query","where","getDocs","addDoc","jsxDEV","_jsxDEV","MatchedUsers","userId","_s","matches","setMatches","fetchAndCheckMutualLikes","likeFromUserQuery","likeFromUserSnapshot","likedUserIds","docs","map","doc","data","toUserId","existingMatchesQuery","existingMatchesSnapshot","existingMatchedUserIds","matchedUserId","newMatches","likedUserId","includes","console","log","mutualLikeQuery","mutualLikeSnapshot","empty","timestamp","Date","push","error","children","fileName","_jsxFileName","lineNumber","columnNumber","match","index","_c","$RefreshReg$"],"sources":["/Users/shuga/hs_2405/src/MatchedUsers.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { db } from './firebase';\nimport { collection, query, where, getDocs, addDoc } from 'firebase/firestore';\n\nfunction MatchedUsers({ userId }) {\n  const [matches, setMatches] = useState([]);\n\n  useEffect(() => {\n    const fetchAndCheckMutualLikes = async () => {\n      try {\n        // `userId`が「いいね」したすべてのユーザーを取得\n        const likeFromUserQuery = query(\n          collection(db, 'Likes'),\n          where('fromUserId', '==', userId),\n          where('evaluation', '==', 'like')\n        );\n        const likeFromUserSnapshot = await getDocs(likeFromUserQuery);\n        const likedUserIds = likeFromUserSnapshot.docs.map(doc => doc.data().toUserId);\n\n        // 既存のマッチを取得\n        const existingMatchesQuery = query(\n          collection(db, 'UserMatches'),\n          where('userId', '==', userId)\n        );\n        const existingMatchesSnapshot = await getDocs(existingMatchesQuery);\n        const existingMatchedUserIds = existingMatchesSnapshot.docs.map(doc => doc.data().matchedUserId);\n\n        // 新しいマッチを確認して保存\n        const newMatches = [];\n        for (const likedUserId of likedUserIds) {\n          if (existingMatchedUserIds.includes(likedUserId)) {\n            console.log(`既にマッチが存在しています: ${userId} と ${likedUserId}`);\n            continue;\n          }\n\n          // 相手も`userId`を「いいね」しているか確認\n          const mutualLikeQuery = query(\n            collection(db, 'Likes'),\n            where('fromUserId', '==', likedUserId),\n            where('toUserId', '==', userId),\n            where('evaluation', '==', 'like')\n          );\n          const mutualLikeSnapshot = await getDocs(mutualLikeQuery);\n\n          if (!mutualLikeSnapshot.empty) {\n            // 新しいマッチを保存\n            await addDoc(collection(db, 'UserMatches'), {\n              userId: userId,\n              matchedUserId: likedUserId,\n              timestamp: new Date()\n            });\n            newMatches.push({ userId, matchedUserId: likedUserId });\n            console.log(`新しいマッチが保存されました: ${userId} と ${likedUserId}`);\n          }\n        }\n\n        // すべてのマッチ情報をstateにセット\n        setMatches([...existingMatchesSnapshot.docs.map(doc => doc.data()), ...newMatches]);\n      } catch (error) {\n        console.error('マッチングとデータ取得エラー:', error);\n      }\n    };\n\n    fetchAndCheckMutualLikes();\n  }, [userId]);\n\n  return (\n    <div>\n      <h2>マッチしたユーザー</h2>\n      <ul>\n        {matches.map((match, index) => (\n          <li key={index}>\n            <p>マッチユーザーID: {match.matchedUserId}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default MatchedUsers;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,EAAE,QAAQ,YAAY;AAC/B,SAASC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/E,SAASC,YAAYA,CAAC;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EAChC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACd,MAAMe,wBAAwB,GAAG,MAAAA,CAAA,KAAY;MAC3C,IAAI;QACF;QACA,MAAMC,iBAAiB,GAAGZ,KAAK,CAC7BD,UAAU,CAACD,EAAE,EAAE,OAAO,CAAC,EACvBG,KAAK,CAAC,YAAY,EAAE,IAAI,EAAEM,MAAM,CAAC,EACjCN,KAAK,CAAC,YAAY,EAAE,IAAI,EAAE,MAAM,CAClC,CAAC;QACD,MAAMY,oBAAoB,GAAG,MAAMX,OAAO,CAACU,iBAAiB,CAAC;QAC7D,MAAME,YAAY,GAAGD,oBAAoB,CAACE,IAAI,CAACC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC;;QAE9E;QACA,MAAMC,oBAAoB,GAAGpB,KAAK,CAChCD,UAAU,CAACD,EAAE,EAAE,aAAa,CAAC,EAC7BG,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAEM,MAAM,CAC9B,CAAC;QACD,MAAMc,uBAAuB,GAAG,MAAMnB,OAAO,CAACkB,oBAAoB,CAAC;QACnE,MAAME,sBAAsB,GAAGD,uBAAuB,CAACN,IAAI,CAACC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAACK,aAAa,CAAC;;QAEhG;QACA,MAAMC,UAAU,GAAG,EAAE;QACrB,KAAK,MAAMC,WAAW,IAAIX,YAAY,EAAE;UACtC,IAAIQ,sBAAsB,CAACI,QAAQ,CAACD,WAAW,CAAC,EAAE;YAChDE,OAAO,CAACC,GAAG,CAAC,kBAAkBrB,MAAM,MAAMkB,WAAW,EAAE,CAAC;YACxD;UACF;;UAEA;UACA,MAAMI,eAAe,GAAG7B,KAAK,CAC3BD,UAAU,CAACD,EAAE,EAAE,OAAO,CAAC,EACvBG,KAAK,CAAC,YAAY,EAAE,IAAI,EAAEwB,WAAW,CAAC,EACtCxB,KAAK,CAAC,UAAU,EAAE,IAAI,EAAEM,MAAM,CAAC,EAC/BN,KAAK,CAAC,YAAY,EAAE,IAAI,EAAE,MAAM,CAClC,CAAC;UACD,MAAM6B,kBAAkB,GAAG,MAAM5B,OAAO,CAAC2B,eAAe,CAAC;UAEzD,IAAI,CAACC,kBAAkB,CAACC,KAAK,EAAE;YAC7B;YACA,MAAM5B,MAAM,CAACJ,UAAU,CAACD,EAAE,EAAE,aAAa,CAAC,EAAE;cAC1CS,MAAM,EAAEA,MAAM;cACdgB,aAAa,EAAEE,WAAW;cAC1BO,SAAS,EAAE,IAAIC,IAAI,CAAC;YACtB,CAAC,CAAC;YACFT,UAAU,CAACU,IAAI,CAAC;cAAE3B,MAAM;cAAEgB,aAAa,EAAEE;YAAY,CAAC,CAAC;YACvDE,OAAO,CAACC,GAAG,CAAC,mBAAmBrB,MAAM,MAAMkB,WAAW,EAAE,CAAC;UAC3D;QACF;;QAEA;QACAf,UAAU,CAAC,CAAC,GAAGW,uBAAuB,CAACN,IAAI,CAACC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,GAAGM,UAAU,CAAC,CAAC;MACrF,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdR,OAAO,CAACQ,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACzC;IACF,CAAC;IAEDxB,wBAAwB,CAAC,CAAC;EAC5B,CAAC,EAAE,CAACJ,MAAM,CAAC,CAAC;EAEZ,oBACEF,OAAA;IAAA+B,QAAA,gBACE/B,OAAA;MAAA+B,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClBnC,OAAA;MAAA+B,QAAA,EACG3B,OAAO,CAACO,GAAG,CAAC,CAACyB,KAAK,EAAEC,KAAK,kBACxBrC,OAAA;QAAA+B,QAAA,eACE/B,OAAA;UAAA+B,QAAA,GAAG,gDAAW,EAACK,KAAK,CAAClB,aAAa;QAAA;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC,GADhCE,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAAChC,EAAA,CA1EQF,YAAY;AAAAqC,EAAA,GAAZrC,YAAY;AA4ErB,eAAeA,YAAY;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}