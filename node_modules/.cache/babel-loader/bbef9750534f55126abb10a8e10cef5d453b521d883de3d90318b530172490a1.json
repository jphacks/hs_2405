{"ast":null,"code":"var _jsxFileName = \"/Users/shuga/euh/src/Question.js\",\n  _s = $RefreshSig$();\nimport { db } from './firebase';\nimport { useState, useEffect } from 'react';\nimport { collection, addDoc, query, where, getDocs } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function postQuestion(userId, questionText) {\n  if (!userId) {\n    console.warn(\"userId is undefined or null. Aborting postQuestion.\");\n    return; // userIdが無効な場合、処理を中断\n  }\n  try {\n    console.log(\"Attempting to post a question with userId:\", userId);\n    await addDoc(collection(db, 'Questions'), {\n      question: questionText,\n      userId: userId,\n      createdAt: new Date()\n    });\n    console.log('質問が投稿されました');\n  } catch (error) {\n    console.error('エラー発生 during posting question:', error);\n  }\n}\nfunction Question({\n  userId\n}) {\n  _s();\n  const [questionText, setQuestionText] = useState('');\n  const [message, setMessage] = useState(''); // 成功メッセージの新しいステート\n  const [pastQuestions, setPastQuestions] = useState([]); // 過去の質問リストのステート\n\n  // 過去の質問を取得する関数\n  const fetchPastQuestions = async () => {\n    if (!userId) {\n      console.warn(\"Invalid userId:\", userId);\n      return; // userIdが無効の場合はクエリを実行しない\n    }\n    try {\n      console.log(\"Fetching past questions for userId:\", userId);\n      const q = query(collection(db, 'Questions'), where('userId', '==', userId));\n      const querySnapshot = await getDocs(q);\n      console.log(\"Query snapshot received:\", querySnapshot);\n      if (querySnapshot.empty) {\n        console.warn(\"No past questions found for userId:\", userId);\n      }\n      const questions = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      console.log(\"Fetched questions:\", questions);\n      setPastQuestions(questions);\n    } catch (error) {\n      console.error('エラー発生 during fetching past questions:', error);\n    }\n  };\n\n  // 初回レンダリング時に過去の質問を取得\n  useEffect(() => {\n    console.log(\"Component mounted. Fetching past questions...\");\n    fetchPastQuestions();\n  }, [userId]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    console.log(\"Form submitted with questionText:\", questionText);\n    await postQuestion(userId, questionText);\n    setQuestionText('');\n    setMessage('質問が投稿されました');\n    await fetchPastQuestions(); // 質問を投稿したら過去の質問を再取得\n    setTimeout(() => {\n      setMessage('');\n      console.log(\"Message cleared after timeout.\");\n    }, 3000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u8CEA\\u554F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        type: \"text\",\n        placeholder: \"\\u8CEA\\u554F\\u3092\\u5165\\u529B\",\n        value: questionText,\n        onChange: e => setQuestionText(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"\\u6295\\u7A3F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 19\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u904E\\u53BB\\u306E\\u8CEA\\u554F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: pastQuestions.length > 0 ? pastQuestions.map(question => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: question.question\n      }, question.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u904E\\u53BB\\u306E\\u8CEA\\u554F\\u304C\\u3042\\u308A\\u307E\\u305B\\u3093\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(Question, \"eJB4C4qFC20OMy+OCSuAdXppVx8=\");\n_c = Question;\nexport default Question;\nvar _c;\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"names":["db","useState","useEffect","collection","addDoc","query","where","getDocs","jsxDEV","_jsxDEV","postQuestion","userId","questionText","console","warn","log","question","createdAt","Date","error","Question","_s","setQuestionText","message","setMessage","pastQuestions","setPastQuestions","fetchPastQuestions","q","querySnapshot","empty","questions","docs","map","doc","id","data","handleSubmit","e","preventDefault","setTimeout","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","length","_c","$RefreshReg$"],"sources":["/Users/shuga/euh/src/Question.js"],"sourcesContent":["import { db } from './firebase';\nimport { useState, useEffect } from 'react';\nimport { collection, addDoc, query, where, getDocs } from 'firebase/firestore';\n\nasync function postQuestion(userId, questionText) {\n    if (!userId) {\n        console.warn(\"userId is undefined or null. Aborting postQuestion.\");\n        return; // userIdが無効な場合、処理を中断\n    }\n\n    try {\n        console.log(\"Attempting to post a question with userId:\", userId);\n        await addDoc(collection(db, 'Questions'), {\n            question: questionText,\n            userId: userId,\n            createdAt: new Date(),\n        });\n        console.log('質問が投稿されました');\n    } catch (error) {\n        console.error('エラー発生 during posting question:', error);\n    }\n}\n\nfunction Question({ userId }) {\n  const [questionText, setQuestionText] = useState('');\n  const [message, setMessage] = useState(''); // 成功メッセージの新しいステート\n  const [pastQuestions, setPastQuestions] = useState([]); // 過去の質問リストのステート\n\n  // 過去の質問を取得する関数\n const fetchPastQuestions = async () => {\n    if (!userId) {\n        console.warn(\"Invalid userId:\", userId);\n        return; // userIdが無効の場合はクエリを実行しない\n    }\n    try {\n        console.log(\"Fetching past questions for userId:\", userId);\n        const q = query(collection(db, 'Questions'), where('userId', '==', userId));\n        const querySnapshot = await getDocs(q);\n        console.log(\"Query snapshot received:\", querySnapshot);\n\n        if (querySnapshot.empty) {\n            console.warn(\"No past questions found for userId:\", userId);\n        }\n\n        const questions = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n        console.log(\"Fetched questions:\", questions);\n        setPastQuestions(questions);\n    } catch (error) {\n        console.error('エラー発生 during fetching past questions:', error);\n    }\n};\n\n  // 初回レンダリング時に過去の質問を取得\n  useEffect(() => {\n    console.log(\"Component mounted. Fetching past questions...\");\n    fetchPastQuestions();\n  }, [userId]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    console.log(\"Form submitted with questionText:\", questionText);\n    await postQuestion(userId, questionText);\n    setQuestionText('');\n    setMessage('質問が投稿されました');\n    await fetchPastQuestions(); // 質問を投稿したら過去の質問を再取得\n    setTimeout(() => {\n      setMessage('');\n      console.log(\"Message cleared after timeout.\");\n    }, 3000);\n  };\n\n  return (\n    <div>\n      <h2>質問</h2>\n      <form onSubmit={handleSubmit}>\n        <textarea\n          type=\"text\"\n          placeholder=\"質問を入力\"\n          value={questionText}\n          onChange={(e) => setQuestionText(e.target.value)}\n          required\n        />\n        <button type=\"submit\">投稿</button>\n      </form>\n      {message && <p>{message}</p>} {/* 成功メッセージを表示 */}\n\n      <h3>過去の質問</h3>\n      <ul>\n        {pastQuestions.length > 0 ? (\n          pastQuestions.map(question => (\n            <li key={question.id}>{question.question}</li>\n          ))\n        ) : (\n          <p>過去の質問がありません</p>\n        )}\n      </ul>\n    </div>\n  );\n}\n\nexport default Question;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}