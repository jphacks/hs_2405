{"ast":null,"code":"import { collection, query, where, getDocs } from 'firebase/firestore';\nimport { db } from './firebase';\nexport async function checkMutualLike(fromUserId, toUserId) {\n  try {\n    // fromUserId または toUserId が関与する「いいね」を一括で取得\n    const likesQuery = query(collection(db, 'Likes'), where('fromUserId', 'in', [fromUserId, toUserId]), where('toUserId', 'in', [fromUserId, toUserId]));\n    const likesSnapshot = await getDocs(likesQuery);\n\n    // fromUserId -> toUserId および toUserId -> fromUserId の両方が存在するか確認\n    let fromToLikeExists = false;\n    let toFromLikeExists = false;\n    likesSnapshot.forEach(doc => {\n      const data = doc.data();\n      if (data.fromUserId === fromUserId && data.toUserId === toUserId) {\n        fromToLikeExists = true;\n      } else if (data.fromUserId === toUserId && data.toUserId === fromUserId) {\n        toFromLikeExists = true;\n      }\n    });\n    return fromToLikeExists && toFromLikeExists;\n  } catch (error) {\n    console.error('相互「いいね」の確認エラー:', error);\n    return false;\n  }\n}","map":{"version":3,"names":["collection","query","where","getDocs","db","checkMutualLike","fromUserId","toUserId","likesQuery","likesSnapshot","fromToLikeExists","toFromLikeExists","forEach","doc","data","error","console"],"sources":["/Users/shuga/euh/src/checkMutualLike.js"],"sourcesContent":["import { collection, query, where, getDocs } from 'firebase/firestore';\nimport { db } from './firebase';\n\nexport async function checkMutualLike(fromUserId, toUserId) {\n  try {\n    // fromUserId または toUserId が関与する「いいね」を一括で取得\n    const likesQuery = query(\n      collection(db, 'Likes'),\n      where('fromUserId', 'in', [fromUserId, toUserId]),\n      where('toUserId', 'in', [fromUserId, toUserId])\n    );\n    const likesSnapshot = await getDocs(likesQuery);\n\n    // fromUserId -> toUserId および toUserId -> fromUserId の両方が存在するか確認\n    let fromToLikeExists = false;\n    let toFromLikeExists = false;\n\n    likesSnapshot.forEach((doc) => {\n      const data = doc.data();\n      if (data.fromUserId === fromUserId && data.toUserId === toUserId) {\n        fromToLikeExists = true;\n      } else if (data.fromUserId === toUserId && data.toUserId === fromUserId) {\n        toFromLikeExists = true;\n      }\n    });\n\n    return fromToLikeExists && toFromLikeExists;\n  } catch (error) {\n    console.error('相互「いいね」の確認エラー:', error);\n    return false;\n  }\n}"],"mappings":"AAAA,SAASA,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,QAAQ,oBAAoB;AACtE,SAASC,EAAE,QAAQ,YAAY;AAE/B,OAAO,eAAeC,eAAeA,CAACC,UAAU,EAAEC,QAAQ,EAAE;EAC1D,IAAI;IACF;IACA,MAAMC,UAAU,GAAGP,KAAK,CACtBD,UAAU,CAACI,EAAE,EAAE,OAAO,CAAC,EACvBF,KAAK,CAAC,YAAY,EAAE,IAAI,EAAE,CAACI,UAAU,EAAEC,QAAQ,CAAC,CAAC,EACjDL,KAAK,CAAC,UAAU,EAAE,IAAI,EAAE,CAACI,UAAU,EAAEC,QAAQ,CAAC,CAChD,CAAC;IACD,MAAME,aAAa,GAAG,MAAMN,OAAO,CAACK,UAAU,CAAC;;IAE/C;IACA,IAAIE,gBAAgB,GAAG,KAAK;IAC5B,IAAIC,gBAAgB,GAAG,KAAK;IAE5BF,aAAa,CAACG,OAAO,CAAEC,GAAG,IAAK;MAC7B,MAAMC,IAAI,GAAGD,GAAG,CAACC,IAAI,CAAC,CAAC;MACvB,IAAIA,IAAI,CAACR,UAAU,KAAKA,UAAU,IAAIQ,IAAI,CAACP,QAAQ,KAAKA,QAAQ,EAAE;QAChEG,gBAAgB,GAAG,IAAI;MACzB,CAAC,MAAM,IAAII,IAAI,CAACR,UAAU,KAAKC,QAAQ,IAAIO,IAAI,CAACP,QAAQ,KAAKD,UAAU,EAAE;QACvEK,gBAAgB,GAAG,IAAI;MACzB;IACF,CAAC,CAAC;IAEF,OAAOD,gBAAgB,IAAIC,gBAAgB;EAC7C,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,OAAO,KAAK;EACd;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}