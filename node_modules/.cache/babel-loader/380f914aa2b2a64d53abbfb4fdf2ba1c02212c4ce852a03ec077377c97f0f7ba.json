{"ast":null,"code":"import { collection, query, where, getDocs, addDoc } from 'firebase/firestore';\nimport { db } from './firebase';\nexport async function checkMutualLike(userId) {\n  try {\n    // 1. userIdが「いいね」したすべてのユーザーを取得\n    const likeFromUserQuery = query(collection(db, 'Likes'), where('fromUserId', '==', userId), where('evaluation', '==', 'like'));\n    const likeFromUserSnapshot = await getDocs(likeFromUserQuery);\n\n    // 2. 各「いいね」したユーザーに対して相互「いいね」を確認\n    for (const doc of likeFromUserSnapshot.docs) {\n      const likedUserId = doc.data().toUserId;\n\n      // 相手が userId を「いいね」しているかを確認\n      const likeToUserQuery = query(collection(db, 'Likes'), where('fromUserId', '==', likedUserId), where('toUserId', '==', userId), where('evaluation', '==', 'like'));\n      const likeToUserSnapshot = await getDocs(likeToUserQuery);\n\n      // 相互に「いいね」が存在する場合のみマッチを保存\n      if (!likeToUserSnapshot.empty) {\n        // 既にマッチが保存されているかを確認\n        const matchExistsQuery = query(collection(db, 'UserMatches'), where('userId', '==', userId), where('matchedUserId', '==', likedUserId));\n        const matchExistsSnapshot = await getDocs(matchExistsQuery);\n\n        // マッチが存在しなければ、新たに保存\n        if (matchExistsSnapshot.empty) {\n          await addDoc(collection(db, 'UserMatches'), {\n            userId: userId,\n            matchedUserId: likedUserId,\n            timestamp: new Date()\n          });\n          console.log(`新しいマッチが保存されました: ${userId} と ${likedUserId}`);\n        } else {\n          console.log(`既にマッチが存在しています: ${userId} と ${likedUserId}`);\n        }\n      } else {\n        console.log(`相互「いいね」がありません: ${userId} -> ${likedUserId}`);\n      }\n    }\n  } catch (error) {\n    console.error('マッチングエラー:', error);\n  }\n}","map":{"version":3,"names":["collection","query","where","getDocs","addDoc","db","checkMutualLike","userId","likeFromUserQuery","likeFromUserSnapshot","doc","docs","likedUserId","data","toUserId","likeToUserQuery","likeToUserSnapshot","empty","matchExistsQuery","matchExistsSnapshot","matchedUserId","timestamp","Date","console","log","error"],"sources":["/Users/shuga/hs_2405/src/checkMutualLike.js"],"sourcesContent":["import { collection, query, where, getDocs, addDoc } from 'firebase/firestore';\nimport { db } from './firebase';\n\nexport async function checkMutualLike(userId) {\n  try {\n    // 1. userIdが「いいね」したすべてのユーザーを取得\n    const likeFromUserQuery = query(\n      collection(db, 'Likes'),\n      where('fromUserId', '==', userId),\n      where('evaluation', '==', 'like')\n    );\n    const likeFromUserSnapshot = await getDocs(likeFromUserQuery);\n\n    // 2. 各「いいね」したユーザーに対して相互「いいね」を確認\n    for (const doc of likeFromUserSnapshot.docs) {\n      const likedUserId = doc.data().toUserId;\n\n      // 相手が userId を「いいね」しているかを確認\n      const likeToUserQuery = query(\n        collection(db, 'Likes'),\n        where('fromUserId', '==', likedUserId),\n        where('toUserId', '==', userId),\n        where('evaluation', '==', 'like')\n      );\n      const likeToUserSnapshot = await getDocs(likeToUserQuery);\n\n      // 相互に「いいね」が存在する場合のみマッチを保存\n      if (!likeToUserSnapshot.empty) {\n        // 既にマッチが保存されているかを確認\n        const matchExistsQuery = query(\n          collection(db, 'UserMatches'),\n          where('userId', '==', userId),\n          where('matchedUserId', '==', likedUserId)\n        );\n        const matchExistsSnapshot = await getDocs(matchExistsQuery);\n\n        // マッチが存在しなければ、新たに保存\n        if (matchExistsSnapshot.empty) {\n          await addDoc(collection(db, 'UserMatches'), {\n            userId: userId,\n            matchedUserId: likedUserId,\n            timestamp: new Date()\n          });\n          console.log(`新しいマッチが保存されました: ${userId} と ${likedUserId}`);\n        } else {\n          console.log(`既にマッチが存在しています: ${userId} と ${likedUserId}`);\n        }\n      } else {\n        console.log(`相互「いいね」がありません: ${userId} -> ${likedUserId}`);\n      }\n    }\n  } catch (error) {\n    console.error('マッチングエラー:', error);\n  }\n}\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,QAAQ,oBAAoB;AAC9E,SAASC,EAAE,QAAQ,YAAY;AAE/B,OAAO,eAAeC,eAAeA,CAACC,MAAM,EAAE;EAC5C,IAAI;IACF;IACA,MAAMC,iBAAiB,GAAGP,KAAK,CAC7BD,UAAU,CAACK,EAAE,EAAE,OAAO,CAAC,EACvBH,KAAK,CAAC,YAAY,EAAE,IAAI,EAAEK,MAAM,CAAC,EACjCL,KAAK,CAAC,YAAY,EAAE,IAAI,EAAE,MAAM,CAClC,CAAC;IACD,MAAMO,oBAAoB,GAAG,MAAMN,OAAO,CAACK,iBAAiB,CAAC;;IAE7D;IACA,KAAK,MAAME,GAAG,IAAID,oBAAoB,CAACE,IAAI,EAAE;MAC3C,MAAMC,WAAW,GAAGF,GAAG,CAACG,IAAI,CAAC,CAAC,CAACC,QAAQ;;MAEvC;MACA,MAAMC,eAAe,GAAGd,KAAK,CAC3BD,UAAU,CAACK,EAAE,EAAE,OAAO,CAAC,EACvBH,KAAK,CAAC,YAAY,EAAE,IAAI,EAAEU,WAAW,CAAC,EACtCV,KAAK,CAAC,UAAU,EAAE,IAAI,EAAEK,MAAM,CAAC,EAC/BL,KAAK,CAAC,YAAY,EAAE,IAAI,EAAE,MAAM,CAClC,CAAC;MACD,MAAMc,kBAAkB,GAAG,MAAMb,OAAO,CAACY,eAAe,CAAC;;MAEzD;MACA,IAAI,CAACC,kBAAkB,CAACC,KAAK,EAAE;QAC7B;QACA,MAAMC,gBAAgB,GAAGjB,KAAK,CAC5BD,UAAU,CAACK,EAAE,EAAE,aAAa,CAAC,EAC7BH,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAEK,MAAM,CAAC,EAC7BL,KAAK,CAAC,eAAe,EAAE,IAAI,EAAEU,WAAW,CAC1C,CAAC;QACD,MAAMO,mBAAmB,GAAG,MAAMhB,OAAO,CAACe,gBAAgB,CAAC;;QAE3D;QACA,IAAIC,mBAAmB,CAACF,KAAK,EAAE;UAC7B,MAAMb,MAAM,CAACJ,UAAU,CAACK,EAAE,EAAE,aAAa,CAAC,EAAE;YAC1CE,MAAM,EAAEA,MAAM;YACda,aAAa,EAAER,WAAW;YAC1BS,SAAS,EAAE,IAAIC,IAAI,CAAC;UACtB,CAAC,CAAC;UACFC,OAAO,CAACC,GAAG,CAAC,mBAAmBjB,MAAM,MAAMK,WAAW,EAAE,CAAC;QAC3D,CAAC,MAAM;UACLW,OAAO,CAACC,GAAG,CAAC,kBAAkBjB,MAAM,MAAMK,WAAW,EAAE,CAAC;QAC1D;MACF,CAAC,MAAM;QACLW,OAAO,CAACC,GAAG,CAAC,kBAAkBjB,MAAM,OAAOK,WAAW,EAAE,CAAC;MAC3D;IACF;EACF,CAAC,CAAC,OAAOa,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;EACnC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}