{"ast":null,"code":"import { saveMatch } from './saveMatch';\nimport { collection, getDocs, query, where } from 'firebase/firestore';\nimport { db } from './firebase';\nexport async function matchUsers(userId) {\n  console.log(`--- マッチング開始 ---`);\n  console.log(`マッチングをチェック中: 使用ユーザー ${userId} と全ユーザー`);\n  try {\n    // データベースから全ユーザーを取得\n    const usersSnapshot = await getDocs(collection(db, 'users'));\n    const allUsers = usersSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    })).filter(user => user.id !== userId); // 自分自身を除外\n\n    // データベースからユーザーの「いいね」データを一度に取得\n    const likesSnapshot = await getDocs(query(collection(db, 'Likes'), where('fromUserId', '==', userId)));\n    const userLikes = likesSnapshot.docs.map(doc => ({\n      toUserId: doc.data().toUserId\n    }));\n    const likedUserIds = userLikes.map(like => like.toUserId);\n\n    // 取得した「いいね」を元に相互「いいね」チェック\n    for (const otherUser of allUsers) {\n      const otherUserId = otherUser.id;\n\n      // 相手から自分への「いいね」があるかどうかを確認\n      const mutualLike = likedUserIds.includes(otherUserId);\n      const reverseLikesSnapshot = await getDocs(query(collection(db, 'Likes'), where('fromUserId', '==', otherUserId), where('toUserId', '==', userId)));\n      const hasMutualLike = !reverseLikesSnapshot.empty;\n\n      // 相互「いいね」がある場合のみマッチを保存\n      if (mutualLike && hasMutualLike) {\n        try {\n          await saveMatch(userId, otherUserId);\n          console.log(`新しいマッチが保存されました: ${userId} と ${otherUserId}`);\n        } catch (error) {\n          console.error(`マッチング保存エラー: ${userId} と ${otherUserId}`, error);\n        }\n      } else {\n        console.log(`マッチング不可: 双方のいいねが不足 (${userId} -> ${otherUserId}: ${mutualLike}, ${otherUserId} -> ${userId}: ${hasMutualLike})`);\n      }\n    }\n  } catch (error) {\n    console.error('マッチングエラー:', error);\n  }\n}","map":{"version":3,"names":["saveMatch","collection","getDocs","query","where","db","matchUsers","userId","console","log","usersSnapshot","allUsers","docs","map","doc","id","data","filter","user","likesSnapshot","userLikes","toUserId","likedUserIds","like","otherUser","otherUserId","mutualLike","includes","reverseLikesSnapshot","hasMutualLike","empty","error"],"sources":["/Users/shuga/hs_2405/src/matchUsers.js"],"sourcesContent":["import { saveMatch } from './saveMatch';\nimport { collection, getDocs, query, where } from 'firebase/firestore';\nimport { db } from './firebase';\n\nexport async function matchUsers(userId) {\n  console.log(`--- マッチング開始 ---`);\n  console.log(`マッチングをチェック中: 使用ユーザー ${userId} と全ユーザー`);\n\n  try {\n    // データベースから全ユーザーを取得\n    const usersSnapshot = await getDocs(collection(db, 'users'));\n    const allUsers = usersSnapshot.docs\n      .map(doc => ({ id: doc.id, ...doc.data() }))\n      .filter(user => user.id !== userId); // 自分自身を除外\n\n    // データベースからユーザーの「いいね」データを一度に取得\n    const likesSnapshot = await getDocs(query(\n      collection(db, 'Likes'),\n      where('fromUserId', '==', userId)\n    ));\n    const userLikes = likesSnapshot.docs.map(doc => ({\n      toUserId: doc.data().toUserId,\n    }));\n\n    const likedUserIds = userLikes.map(like => like.toUserId);\n\n    // 取得した「いいね」を元に相互「いいね」チェック\n    for (const otherUser of allUsers) {\n      const otherUserId = otherUser.id;\n\n      // 相手から自分への「いいね」があるかどうかを確認\n      const mutualLike = likedUserIds.includes(otherUserId);\n      const reverseLikesSnapshot = await getDocs(query(\n        collection(db, 'Likes'),\n        where('fromUserId', '==', otherUserId),\n        where('toUserId', '==', userId)\n      ));\n      const hasMutualLike = !reverseLikesSnapshot.empty;\n\n      // 相互「いいね」がある場合のみマッチを保存\n      if (mutualLike && hasMutualLike) {\n        try {\n          await saveMatch(userId, otherUserId);\n          console.log(`新しいマッチが保存されました: ${userId} と ${otherUserId}`);\n        } catch (error) {\n          console.error(`マッチング保存エラー: ${userId} と ${otherUserId}`, error);\n        }\n      } else {\n        console.log(`マッチング不可: 双方のいいねが不足 (${userId} -> ${otherUserId}: ${mutualLike}, ${otherUserId} -> ${userId}: ${hasMutualLike})`);\n      }\n    }\n  } catch (error) {\n    console.error('マッチングエラー:', error);\n  }\n}"],"mappings":"AAAA,SAASA,SAAS,QAAQ,aAAa;AACvC,SAASC,UAAU,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,QAAQ,oBAAoB;AACtE,SAASC,EAAE,QAAQ,YAAY;AAE/B,OAAO,eAAeC,UAAUA,CAACC,MAAM,EAAE;EACvCC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;EAC9BD,OAAO,CAACC,GAAG,CAAC,uBAAuBF,MAAM,SAAS,CAAC;EAEnD,IAAI;IACF;IACA,MAAMG,aAAa,GAAG,MAAMR,OAAO,CAACD,UAAU,CAACI,EAAE,EAAE,OAAO,CAAC,CAAC;IAC5D,MAAMM,QAAQ,GAAGD,aAAa,CAACE,IAAI,CAChCC,GAAG,CAACC,GAAG,KAAK;MAAEC,EAAE,EAAED,GAAG,CAACC,EAAE;MAAE,GAAGD,GAAG,CAACE,IAAI,CAAC;IAAE,CAAC,CAAC,CAAC,CAC3CC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACH,EAAE,KAAKR,MAAM,CAAC,CAAC,CAAC;;IAEvC;IACA,MAAMY,aAAa,GAAG,MAAMjB,OAAO,CAACC,KAAK,CACvCF,UAAU,CAACI,EAAE,EAAE,OAAO,CAAC,EACvBD,KAAK,CAAC,YAAY,EAAE,IAAI,EAAEG,MAAM,CAClC,CAAC,CAAC;IACF,MAAMa,SAAS,GAAGD,aAAa,CAACP,IAAI,CAACC,GAAG,CAACC,GAAG,KAAK;MAC/CO,QAAQ,EAAEP,GAAG,CAACE,IAAI,CAAC,CAAC,CAACK;IACvB,CAAC,CAAC,CAAC;IAEH,MAAMC,YAAY,GAAGF,SAAS,CAACP,GAAG,CAACU,IAAI,IAAIA,IAAI,CAACF,QAAQ,CAAC;;IAEzD;IACA,KAAK,MAAMG,SAAS,IAAIb,QAAQ,EAAE;MAChC,MAAMc,WAAW,GAAGD,SAAS,CAACT,EAAE;;MAEhC;MACA,MAAMW,UAAU,GAAGJ,YAAY,CAACK,QAAQ,CAACF,WAAW,CAAC;MACrD,MAAMG,oBAAoB,GAAG,MAAM1B,OAAO,CAACC,KAAK,CAC9CF,UAAU,CAACI,EAAE,EAAE,OAAO,CAAC,EACvBD,KAAK,CAAC,YAAY,EAAE,IAAI,EAAEqB,WAAW,CAAC,EACtCrB,KAAK,CAAC,UAAU,EAAE,IAAI,EAAEG,MAAM,CAChC,CAAC,CAAC;MACF,MAAMsB,aAAa,GAAG,CAACD,oBAAoB,CAACE,KAAK;;MAEjD;MACA,IAAIJ,UAAU,IAAIG,aAAa,EAAE;QAC/B,IAAI;UACF,MAAM7B,SAAS,CAACO,MAAM,EAAEkB,WAAW,CAAC;UACpCjB,OAAO,CAACC,GAAG,CAAC,mBAAmBF,MAAM,MAAMkB,WAAW,EAAE,CAAC;QAC3D,CAAC,CAAC,OAAOM,KAAK,EAAE;UACdvB,OAAO,CAACuB,KAAK,CAAC,eAAexB,MAAM,MAAMkB,WAAW,EAAE,EAAEM,KAAK,CAAC;QAChE;MACF,CAAC,MAAM;QACLvB,OAAO,CAACC,GAAG,CAAC,uBAAuBF,MAAM,OAAOkB,WAAW,KAAKC,UAAU,KAAKD,WAAW,OAAOlB,MAAM,KAAKsB,aAAa,GAAG,CAAC;MAC/H;IACF;EACF,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdvB,OAAO,CAACuB,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;EACnC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}