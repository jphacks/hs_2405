{"ast":null,"code":"// matchUsers.js\nimport { checkMutualLike } from './checkMutualLike';\nimport { saveMatch } from './saveMatch';\nimport { collection, getDocs } from 'firebase/firestore';\nimport { db } from './firebase';\nexport async function matchUsers(userId) {\n  console.log(`--- マッチング開始 ---`);\n  console.log(`マッチングをチェック中: 使用ユーザー ${userId} と全ユーザー`);\n  try {\n    // データベースから全ユーザーを取得\n    const usersSnapshot = await getDocs(collection(db, 'users'));\n    const allUsers = usersSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n\n    // 全ユーザーに対してマッチングを確認\n    for (const otherUser of allUsers) {\n      const otherUserId = otherUser.id;\n\n      // 自分自身とのマッチングを避ける\n      if (otherUserId === userId) continue;\n\n      // マッチング確認\n      const likesFromUser = await checkMutualLike(userId, otherUserId);\n      const likesToUser = await checkMutualLike(otherUserId, userId);\n      console.log(`いいね確認結果: ${userId} -> ${otherUserId}: ${likesFromUser}, ${otherUserId} -> ${userId}: ${likesToUser}`);\n\n      // 双方から「いいね」がある場合のみマッチを保存\n      if (likesFromUser && likesToUser) {\n        try {\n          await saveMatch(userId, otherUserId);\n          console.log(`新しいマッチが保存されました: ${userId} と ${otherUserId}`);\n        } catch (error) {\n          console.error(`マッチング保存エラー: ${userId} と ${otherUserId}`, error);\n        }\n      } else {\n        console.log(`マッチング不可: 双方のいいねが不足 (${userId} -> ${otherUserId}: ${likesFromUser}, ${otherUserId} -> ${userId}: ${likesToUser})`);\n      }\n    }\n  } catch (error) {\n    console.error('マッチングエラー:', error);\n  }\n}","map":{"version":3,"names":["checkMutualLike","saveMatch","collection","getDocs","db","matchUsers","userId","console","log","usersSnapshot","allUsers","docs","map","doc","id","data","otherUser","otherUserId","likesFromUser","likesToUser","error"],"sources":["/Users/shuga/hs_2405/src/matchUsers.js"],"sourcesContent":["// matchUsers.js\nimport { checkMutualLike } from './checkMutualLike';\nimport { saveMatch } from './saveMatch';\nimport { collection, getDocs } from 'firebase/firestore';\nimport { db } from './firebase';\n\nexport async function matchUsers(userId) {\n  console.log(`--- マッチング開始 ---`);\n  console.log(`マッチングをチェック中: 使用ユーザー ${userId} と全ユーザー`);\n\n  try {\n    // データベースから全ユーザーを取得\n    const usersSnapshot = await getDocs(collection(db, 'users'));\n    const allUsers = usersSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n\n    // 全ユーザーに対してマッチングを確認\n    for (const otherUser of allUsers) {\n      const otherUserId = otherUser.id;\n\n      // 自分自身とのマッチングを避ける\n      if (otherUserId === userId) continue;\n\n      // マッチング確認\n      const likesFromUser = await checkMutualLike(userId, otherUserId);\n      const likesToUser = await checkMutualLike(otherUserId, userId);\n\n      console.log(`いいね確認結果: ${userId} -> ${otherUserId}: ${likesFromUser}, ${otherUserId} -> ${userId}: ${likesToUser}`);\n\n      // 双方から「いいね」がある場合のみマッチを保存\n      if (likesFromUser && likesToUser) {\n        try {\n          await saveMatch(userId, otherUserId);\n          console.log(`新しいマッチが保存されました: ${userId} と ${otherUserId}`);\n        } catch (error) {\n          console.error(`マッチング保存エラー: ${userId} と ${otherUserId}`, error);\n        }\n      } else {\n        console.log(`マッチング不可: 双方のいいねが不足 (${userId} -> ${otherUserId}: ${likesFromUser}, ${otherUserId} -> ${userId}: ${likesToUser})`);\n      }\n    }\n  } catch (error) {\n    console.error('マッチングエラー:', error);\n  }\n}\n"],"mappings":"AAAA;AACA,SAASA,eAAe,QAAQ,mBAAmB;AACnD,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,UAAU,EAAEC,OAAO,QAAQ,oBAAoB;AACxD,SAASC,EAAE,QAAQ,YAAY;AAE/B,OAAO,eAAeC,UAAUA,CAACC,MAAM,EAAE;EACvCC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;EAC9BD,OAAO,CAACC,GAAG,CAAC,uBAAuBF,MAAM,SAAS,CAAC;EAEnD,IAAI;IACF;IACA,MAAMG,aAAa,GAAG,MAAMN,OAAO,CAACD,UAAU,CAACE,EAAE,EAAE,OAAO,CAAC,CAAC;IAC5D,MAAMM,QAAQ,GAAGD,aAAa,CAACE,IAAI,CAACC,GAAG,CAACC,GAAG,KAAK;MAAEC,EAAE,EAAED,GAAG,CAACC,EAAE;MAAE,GAAGD,GAAG,CAACE,IAAI,CAAC;IAAE,CAAC,CAAC,CAAC;;IAE/E;IACA,KAAK,MAAMC,SAAS,IAAIN,QAAQ,EAAE;MAChC,MAAMO,WAAW,GAAGD,SAAS,CAACF,EAAE;;MAEhC;MACA,IAAIG,WAAW,KAAKX,MAAM,EAAE;;MAE5B;MACA,MAAMY,aAAa,GAAG,MAAMlB,eAAe,CAACM,MAAM,EAAEW,WAAW,CAAC;MAChE,MAAME,WAAW,GAAG,MAAMnB,eAAe,CAACiB,WAAW,EAAEX,MAAM,CAAC;MAE9DC,OAAO,CAACC,GAAG,CAAC,YAAYF,MAAM,OAAOW,WAAW,KAAKC,aAAa,KAAKD,WAAW,OAAOX,MAAM,KAAKa,WAAW,EAAE,CAAC;;MAElH;MACA,IAAID,aAAa,IAAIC,WAAW,EAAE;QAChC,IAAI;UACF,MAAMlB,SAAS,CAACK,MAAM,EAAEW,WAAW,CAAC;UACpCV,OAAO,CAACC,GAAG,CAAC,mBAAmBF,MAAM,MAAMW,WAAW,EAAE,CAAC;QAC3D,CAAC,CAAC,OAAOG,KAAK,EAAE;UACdb,OAAO,CAACa,KAAK,CAAC,eAAed,MAAM,MAAMW,WAAW,EAAE,EAAEG,KAAK,CAAC;QAChE;MACF,CAAC,MAAM;QACLb,OAAO,CAACC,GAAG,CAAC,uBAAuBF,MAAM,OAAOW,WAAW,KAAKC,aAAa,KAAKD,WAAW,OAAOX,MAAM,KAAKa,WAAW,GAAG,CAAC;MAChI;IACF;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdb,OAAO,CAACa,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;EACnC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}