{"ast":null,"code":"var _jsxFileName = \"/Users/shuga/euh/src/MatchedUsers.js\",\n  _s = $RefreshSig$();\n// MatchedUsers.js\nimport React, { useEffect, useState } from 'react';\nimport { db } from './firebase';\nimport { collection, query, where, getDocs } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MatchedUsers({\n  userId\n}) {\n  _s();\n  const [matches, setMatches] = useState([]);\n  useEffect(() => {\n    const fetchMatches = async () => {\n      console.log(`Fetching matches for userId: ${userId}`);\n      try {\n        // userId に対する「いいね」を取得\n        const receivedLikesQuery = query(collection(db, 'Likes'), where('toUserId', '==', userId));\n        const receivedLikesSnapshot = await getDocs(receivedLikesQuery);\n        const potentialMatches = [];\n\n        // 受け取った「いいね」をもとに、相互「いいね」を確認\n        for (const doc of receivedLikesSnapshot.docs) {\n          const {\n            fromUserId\n          } = doc.data();\n\n          // fromUserId からの「いいね」が userId に対してもあるか確認\n          const mutualLikeQuery = query(collection(db, 'Likes'), where('fromUserId', '==', userId), where('toUserId', '==', fromUserId));\n          const mutualLikeSnapshot = await getDocs(mutualLikeQuery);\n\n          // 相互「いいね」がある場合にマッチとして追加\n          if (!mutualLikeSnapshot.empty) {\n            potentialMatches.push({\n              id: fromUserId,\n              // マッチユーザーのID\n              ...doc.data() // 追加の情報が必要な場合\n            });\n          }\n        }\n        console.log('Mutual matches:', potentialMatches);\n        setMatches(potentialMatches);\n      } catch (error) {\n        console.error('マッチデータの取得エラー:', error);\n      }\n    };\n    fetchMatches(); // ページにアクセスするたびにマッチングを実行\n  }, [userId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u30DE\\u30C3\\u30C1\\u3057\\u305F\\u30E6\\u30FC\\u30B6\\u30FC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: matches.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u307E\\u3060\\u30DE\\u30C3\\u30C1\\u304C\\u3042\\u308A\\u307E\\u305B\\u3093\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this) : matches.map(match => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u30DE\\u30C3\\u30C1\\u30E6\\u30FC\\u30B6\\u30FCID: \", match.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this)\n      }, match.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(MatchedUsers, \"YhlcfFikU4Xnm4DkUW695+Zqf6o=\");\n_c = MatchedUsers;\nexport default MatchedUsers;\nvar _c;\n$RefreshReg$(_c, \"MatchedUsers\");","map":{"version":3,"names":["React","useEffect","useState","db","collection","query","where","getDocs","jsxDEV","_jsxDEV","MatchedUsers","userId","_s","matches","setMatches","fetchMatches","console","log","receivedLikesQuery","receivedLikesSnapshot","potentialMatches","doc","docs","fromUserId","data","mutualLikeQuery","mutualLikeSnapshot","empty","push","id","error","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","match","_c","$RefreshReg$"],"sources":["/Users/shuga/euh/src/MatchedUsers.js"],"sourcesContent":["// MatchedUsers.js\nimport React, { useEffect, useState } from 'react';\nimport { db } from './firebase';\nimport { collection, query, where, getDocs } from 'firebase/firestore';\n\nfunction MatchedUsers({ userId }) {\n  const [matches, setMatches] = useState([]);\n\n  useEffect(() => {\n    const fetchMatches = async () => {\n      console.log(`Fetching matches for userId: ${userId}`);\n      try {\n        // userId に対する「いいね」を取得\n        const receivedLikesQuery = query(\n          collection(db, 'Likes'),\n          where('toUserId', '==', userId)\n        );\n        const receivedLikesSnapshot = await getDocs(receivedLikesQuery);\n        \n        const potentialMatches = [];\n\n        // 受け取った「いいね」をもとに、相互「いいね」を確認\n        for (const doc of receivedLikesSnapshot.docs) {\n          const { fromUserId } = doc.data();\n\n          // fromUserId からの「いいね」が userId に対してもあるか確認\n          const mutualLikeQuery = query(\n            collection(db, 'Likes'),\n            where('fromUserId', '==', userId),\n            where('toUserId', '==', fromUserId)\n          );\n          const mutualLikeSnapshot = await getDocs(mutualLikeQuery);\n\n          // 相互「いいね」がある場合にマッチとして追加\n          if (!mutualLikeSnapshot.empty) {\n            potentialMatches.push({\n              id: fromUserId, // マッチユーザーのID\n              ...doc.data()   // 追加の情報が必要な場合\n            });\n          }\n        }\n\n        console.log('Mutual matches:', potentialMatches);\n        setMatches(potentialMatches);\n      } catch (error) {\n        console.error('マッチデータの取得エラー:', error);\n      }\n    };\n\n    fetchMatches(); // ページにアクセスするたびにマッチングを実行\n  }, [userId]);\n\n  return (\n    <div>\n      <h2>マッチしたユーザー</h2>\n      <ul>\n        {matches.length === 0 ? (\n          <p>まだマッチがありません</p>\n        ) : (\n          matches.map(match => (\n            <li key={match.id}>\n              <p>マッチユーザーID: {match.id}</p>\n            </li>\n          ))\n        )}\n      </ul>\n    </div>\n  );\n}\n\nexport default MatchedUsers;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}