{"ast":null,"code":"var _jsxFileName = \"/Users/shuga/euh/src/Question.js\",\n  _s = $RefreshSig$();\nimport { db } from './firebase';\nimport { useState, useEffect } from 'react';\nimport { collection, addDoc, query, where, getDocs } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function postQuestion(userId, questionText) {\n  try {\n    await addDoc(collection(db, 'Questions'), {\n      question: questionText,\n      userId: userId,\n      createdAt: new Date()\n    });\n    console.log('質問が投稿されました');\n  } catch (error) {\n    console.error('エラー発生:', error);\n  }\n}\nfunction Question({\n  userId\n}) {\n  _s();\n  const [questionText, setQuestionText] = useState('');\n  const [message, setMessage] = useState(''); // 成功メッセージの新しいステート\n  const [pastQuestions, setPastQuestions] = useState([]); // 過去の質問リストのステート\n\n  // 過去の質問を取得する関数\n  const fetchPastQuestions = async () => {\n    try {\n      const q = query(collection(db, 'Questions'), where('userId', '==', userId));\n      const querySnapshot = await getDocs(q);\n      const questions = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setPastQuestions(questions);\n    } catch (error) {\n      console.error('過去の質問の取得エラー:', error);\n    }\n  };\n\n  // 初回レンダリング時に過去の質問を取得\n  useEffect(() => {\n    fetchPastQuestions();\n  }, [userId]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    await postQuestion(userId, questionText);\n    setQuestionText('');\n    setMessage('質問が投稿されました'); // 成功メッセージを設定\n    fetchPastQuestions(); // 質問を投稿したら過去の質問を再取得\n    setTimeout(() => setMessage(''), 3000); // 3秒後にメッセージをクリア\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u8CEA\\u554F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        type: \"text\",\n        placeholder: \"\\u8CEA\\u554F\\u3092\\u5165\\u529B\",\n        value: questionText,\n        onChange: e => setQuestionText(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"\\u6295\\u7A3F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 19\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u904E\\u53BB\\u306E\\u8CEA\\u554F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: pastQuestions.map(question => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: question.question\n      }, question.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(Question, \"eJB4C4qFC20OMy+OCSuAdXppVx8=\");\n_c = Question;\nexport default Question;\nvar _c;\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"names":["db","useState","useEffect","collection","addDoc","query","where","getDocs","jsxDEV","_jsxDEV","postQuestion","userId","questionText","question","createdAt","Date","console","log","error","Question","_s","setQuestionText","message","setMessage","pastQuestions","setPastQuestions","fetchPastQuestions","q","querySnapshot","questions","docs","map","doc","id","data","handleSubmit","e","preventDefault","setTimeout","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","_c","$RefreshReg$"],"sources":["/Users/shuga/euh/src/Question.js"],"sourcesContent":["import { db } from './firebase';\nimport { useState, useEffect } from 'react';\nimport { collection, addDoc, query, where, getDocs } from 'firebase/firestore';\n\nasync function postQuestion(userId, questionText) {\n    try {\n        await addDoc(collection(db, 'Questions'), {\n            question: questionText,\n            userId: userId,\n            createdAt: new Date(),\n        });\n        console.log('質問が投稿されました');\n    } catch (error) {\n        console.error('エラー発生:', error);\n    }\n}\n\nfunction Question({ userId }) {\n  const [questionText, setQuestionText] = useState('');\n  const [message, setMessage] = useState(''); // 成功メッセージの新しいステート\n  const [pastQuestions, setPastQuestions] = useState([]); // 過去の質問リストのステート\n\n  // 過去の質問を取得する関数\n  const fetchPastQuestions = async () => {\n    try {\n      const q = query(collection(db, 'Questions'), where('userId', '==', userId));\n      const querySnapshot = await getDocs(q);\n      const questions = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n      setPastQuestions(questions);\n    } catch (error) {\n      console.error('過去の質問の取得エラー:', error);\n    }\n  };\n\n  // 初回レンダリング時に過去の質問を取得\n  useEffect(() => {\n    fetchPastQuestions();\n  }, [userId]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    await postQuestion(userId, questionText);\n    setQuestionText('');\n    setMessage('質問が投稿されました'); // 成功メッセージを設定\n    fetchPastQuestions(); // 質問を投稿したら過去の質問を再取得\n    setTimeout(() => setMessage(''), 3000); // 3秒後にメッセージをクリア\n  };\n\n  return (\n    <div>\n      <h2>質問</h2>\n      <form onSubmit={handleSubmit}>\n        <textarea\n          type=\"text\"\n          placeholder=\"質問を入力\"\n          value={questionText}\n          onChange={(e) => setQuestionText(e.target.value)}\n          required\n        />\n        <button type=\"submit\">投稿</button>\n      </form>\n      {message && <p>{message}</p>} {/* 成功メッセージを表示 */}\n\n      <h3>過去の質問</h3>\n      <ul>\n        {pastQuestions.map(question => (\n          <li key={question.id}>{question.question}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Question;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}